import { NextRequest, NextResponse } from "next/server";

// Mock course detail data
const mockCourseDetail = {
    id: "1",
    title: "React Advanced Patterns v√† Performance Optimization",
    description:
        "Kh√≥a h·ªçc chuy√™n s√¢u v·ªÅ React v·ªõi c√°c pattern n√¢ng cao v√† k·ªπ thu·∫≠t t·ªëi ∆∞u h√≥a hi·ªáu su·∫•t. B·∫°n s·∫Ω h·ªçc c√°ch x√¢y d·ª±ng ·ª©ng d·ª•ng React c√≥ hi·ªáu su·∫•t cao, d·ªÖ maintain v√† scalable.",
    instructor: "Nguy·ªÖn VƒÉn A",
    duration: 40,
    level: "advanced" as const,
    price: 1500000,
    rating: 4.8,
    studentsCount: 234,
    category: {
        id: "1",
        name: "Frontend",
        slug: "frontend",
        description: "Ph√°t tri·ªÉn giao di·ªán ng∆∞·ªùi d√πng",
        icon: "üíª",
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
    },
    tags: ["React", "JavaScript", "TypeScript", "Performance"],
    thumbnail: "/images/course1.jpg",
    videoUrl: null,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
    isPublished: true,
};

export async function GET(
    request: NextRequest,
    { params }: { params: { id: string } }
) {
    try {
        const { id } = params;

        // Simulate API delay
        await new Promise((resolve) => setTimeout(resolve, 500));

        if (id === "1") {
            return NextResponse.json({
                data: mockCourseDetail,
                message: "L·∫•y th√¥ng tin kh√≥a h·ªçc th√†nh c√¥ng",
            });
        }

        // Generate mock data for other IDs
        const mockCourse = {
            ...mockCourseDetail,
            id,
            title: `Mock Course ${id}`,
            description: `M√¥ t·∫£ kh√≥a h·ªçc mock ${id}`,
        };

        return NextResponse.json({
            data: mockCourse,
            message: "L·∫•y th√¥ng tin kh√≥a h·ªçc th√†nh c√¥ng",
        });
    } catch (error) {
        return NextResponse.json(
            { message: "C√≥ l·ªói x·∫£y ra khi l·∫•y th√¥ng tin kh√≥a h·ªçc" },
            { status: 500 }
        );
    }
}
