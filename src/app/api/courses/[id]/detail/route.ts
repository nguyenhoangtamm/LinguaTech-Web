import { NextRequest, NextResponse } from "next/server";

// Mock detailed course data with modules
const mockCourseDetailWithModules = {
    course: {
        id: "1",
        title: "React Advanced Patterns v√† Performance Optimization",
        description:
            "Kh√≥a h·ªçc chuy√™n s√¢u v·ªÅ React v·ªõi c√°c pattern n√¢ng cao v√† k·ªπ thu·∫≠t t·ªëi ∆∞u h√≥a hi·ªáu su·∫•t. B·∫°n s·∫Ω h·ªçc c√°ch x√¢y d·ª±ng ·ª©ng d·ª•ng React c√≥ hi·ªáu su·∫•t cao, d·ªÖ maintain v√† scalable.",
        instructor: "Nguy·ªÖn VƒÉn A",
        duration: 40,
        level: "advanced" as const,
        price: 1500000,
        rating: 4.8,
        studentsCount: 234,
        category: {
            id: "1",
            name: "Frontend",
            slug: "frontend",
            description: "Ph√°t tri·ªÉn giao di·ªán ng∆∞·ªùi d√πng",
            icon: "üíª",
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString(),
        },
        tags: ["React", "JavaScript", "TypeScript", "Performance"],
        thumbnail: "/images/course1.jpg",
        videoUrl: null,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        isPublished: true,
    },
    modules: [
        {
            id: "mod1",
            title: "Ph·∫ßn 1: C∆° s·ªü v√† pattern",
            description:
                "T√¨m hi·ªÉu v·ªÅ c√°c pattern c∆° b·∫£n v√† n√¢ng cao trong React",
            order: 1,
            lessons: [
                {
                    id: "l1",
                    title: "Gi·ªõi thi·ªáu v·ªÅ Advanced Patterns",
                    duration: 45,
                    completed: true,
                    materials: ["m1"],
                    contentType: "video" as const,
                    order: 1,
                },
                {
                    id: "l2",
                    title: "Custom Hooks v√† Logic Reuse",
                    duration: 52,
                    completed: true,
                    materials: ["m2"],
                    contentType: "video" as const,
                    order: 2,
                },
                {
                    id: "l3",
                    title: "Context API Deep Dive",
                    duration: 38,
                    completed: false,
                    materials: [],
                    contentType: "video" as const,
                    order: 3,
                },
                {
                    id: "l4",
                    title: "Compound Components Pattern",
                    duration: 41,
                    completed: false,
                    materials: ["m3"],
                    contentType: "reading" as const,
                    order: 4,
                },
            ],
        },
        {
            id: "mod2",
            title: "Ph·∫ßn 2: Performance v√† Optimization",
            description: "H·ªçc c√°c k·ªπ thu·∫≠t t·ªëi ∆∞u h√≥a hi·ªáu su·∫•t React",
            order: 2,
            lessons: [
                {
                    id: "l5",
                    title: "Code Splitting v√† Lazy Loading",
                    duration: 35,
                    completed: false,
                    materials: [],
                    contentType: "reading" as const,
                    order: 1,
                },
                {
                    id: "l6",
                    title: "Testing Advanced Components",
                    duration: 47,
                    completed: false,
                    materials: [],
                    contentType: "reading" as const,
                    order: 2,
                },
                {
                    id: "l7",
                    title: "Production Deployment Best Practices",
                    duration: 33,
                    completed: false,
                    materials: ["m4"],
                    contentType: "reading" as const,
                    order: 3,
                },
            ],
        },
    ],
    materials: [
        {
            id: "m1",
            fileName: "slides-intro.pdf",
            fileUrl: "/files/slides-intro.pdf",
            fileType: "pdf",
            size: 1200,
        },
        {
            id: "m2",
            fileName: "code-samples.zip",
            fileUrl: "/files/code-samples.zip",
            fileType: "zip",
            size: 20480,
        },
        {
            id: "m3",
            fileName: "reading-advanced.md",
            fileUrl: "/files/reading-advanced.md",
            fileType: "md",
            size: 48,
        },
        {
            id: "m4",
            fileName: "final-project.zip",
            fileUrl: "/files/final-project.zip",
            fileType: "zip",
            size: 15360,
        },
    ],
    instructor: {
        name: "Nguy·ªÖn VƒÉn A",
        avatar: "NA",
        title: "Senior Frontend Developer",
        company: "TechCorp",
        experience: "5+ nƒÉm",
        students: 1250,
        courses: 8,
        rating: 4.9,
        bio: "Senior Frontend Developer v·ªõi h∆°n 5 nƒÉm kinh nghi·ªám ph√°t tri·ªÉn ·ª©ng d·ª•ng web v·ªõi React, Vue.js v√† Angular. ƒê√£ tham gia nhi·ªÅu d·ª± √°n l·ªõn t·∫°i c√°c c√¥ng ty c√¥ng ngh·ªá h√†ng ƒë·∫ßu.",
    },
    reviews: [
        {
            id: "1",
            userName: "Tr·∫ßn VƒÉn B",
            avatar: "TB",
            rating: 5,
            comment:
                "Kh√≥a h·ªçc r·∫•t hay, gi·∫£ng vi√™n gi·∫£i th√≠ch r√µ r√†ng v√† c√≥ nhi·ªÅu v√≠ d·ª• th·ª±c t·∫ø. ƒê√°ng ti·ªÅn!",
            date: "2 ng√†y tr∆∞·ªõc",
            helpful: 12,
        },
        {
            id: "2",
            userName: "L√™ Th·ªã C",
            avatar: "LC",
            rating: 4,
            comment:
                "N·ªôi dung ch·∫•t l∆∞·ª£ng, tuy nhi√™n m·ªôt s·ªë ph·∫ßn h∆°i kh√≥ hi·ªÉu v·ªõi ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu.",
            date: "1 tu·∫ßn tr∆∞·ªõc",
            helpful: 8,
        },
        {
            id: "3",
            userName: "Ph·∫°m Minh D",
            avatar: "PD",
            rating: 5,
            comment:
                "Excellent course! ƒê√£ √°p d·ª•ng ƒë∆∞·ª£c nhi·ªÅu k·ªπ thu·∫≠t v√†o d·ª± √°n th·ª±c t·∫ø.",
            date: "2 tu·∫ßn tr∆∞·ªõc",
            helpful: 15,
        },
    ],
    faqs: [
        {
            id: "1",
            question: "T√¥i c√≥ th·ªÉ truy c·∫≠p kh√≥a h·ªçc bao l√¢u?",
            answer: "B·∫°n c√≥ th·ªÉ truy c·∫≠p kh√≥a h·ªçc tr·ªçn ƒë·ªùi sau khi ƒëƒÉng k√Ω. Kh√¥ng c√≥ gi·ªõi h·∫°n th·ªùi gian.",
        },
        {
            id: "2",
            question: "C√≥ ch·ª©ng ch·ªâ sau khi ho√†n th√†nh kh√¥ng?",
            answer: "C√≥, b·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c ch·ª©ng ch·ªâ ho√†n th√†nh sau khi ho√†n th√†nh t·∫•t c·∫£ b√†i h·ªçc v√† b√†i t·∫≠p.",
        },
        {
            id: "3",
            question: "Kh√≥a h·ªçc c√≥ h·ªó tr·ª£ ti·∫øng Vi·ªát kh√¥ng?",
            answer: "C√≥, to√†n b·ªô kh√≥a h·ªçc ƒë∆∞·ª£c th·ª±c hi·ªán b·∫±ng ti·∫øng Vi·ªát v·ªõi ph·ª• ƒë·ªÅ ti·∫øng Anh.",
        },
    ],
};

export async function GET(
    request: NextRequest,
    { params }: { params: { id: string } }
) {
    try {
        const { id } = params;

        // Simulate API delay
        await new Promise((resolve) => setTimeout(resolve, 500));

        if (id === "1") {
            return NextResponse.json({
                data: mockCourseDetailWithModules,
                message: "L·∫•y th√¥ng tin chi ti·∫øt kh√≥a h·ªçc th√†nh c√¥ng",
            });
        }

        // Generate mock data for other IDs
        const mockDetailData = {
            ...mockCourseDetailWithModules,
            course: {
                ...mockCourseDetailWithModules.course,
                id,
                title: `Mock Course Detail ${id}`,
                description: `M√¥ t·∫£ chi ti·∫øt kh√≥a h·ªçc mock ${id}`,
            },
        };

        return NextResponse.json({
            data: mockDetailData,
            message: "L·∫•y th√¥ng tin chi ti·∫øt kh√≥a h·ªçc th√†nh c√¥ng",
        });
    } catch (error) {
        return NextResponse.json(
            { message: "C√≥ l·ªói x·∫£y ra khi l·∫•y th√¥ng tin chi ti·∫øt kh√≥a h·ªçc" },
            { status: 500 }
        );
    }
}
