"use client";

import { useState, useEffect } from "react";
import { useParams } from "next/navigation";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
    BookOpen,
    ArrowLeft,
    ArrowRight,
    Star,
    Clock,
    Users,
    Play,
    CheckCircle,
    Award,
    MessageCircle,
    Share2,
    Heart,
    Download,
    FileText,
    HelpCircle,
    Menu,
    ChevronDown,
    ChevronUp,
    StickyNote,
    PenTool
} from "lucide-react";
import Link from "next/link";
import { routes } from "@/config/routes";

// Mock lesson data
const mockLessons = [
    { id: "l1", title: "Gi·ªõi thi·ªáu v·ªÅ Advanced Patterns", duration: 45, completed: true, moduleId: "mod1" },
    { id: "l2", title: "Custom Hooks v√† Logic Reuse", duration: 52, completed: true, moduleId: "mod1" },
    { id: "l3", title: "Context API v√† Provider Pattern", duration: 38, completed: false, moduleId: "mod1" },
    { id: "l4", title: "Performance Optimization v·ªõi React.memo", duration: 41, completed: false, moduleId: "mod2" },
    { id: "l5", title: "Code Splitting v√† Lazy Loading", duration: 35, completed: false, moduleId: "mod2" },
    { id: "l6", title: "Testing Advanced Components", duration: 47, completed: false, moduleId: "mod2" },
    { id: "l7", title: "Production Deployment Best Practices", duration: 33, completed: false, moduleId: "mod2" }
];

const mockCurrentLesson = {
    id: "l1",
    title: "Gi·ªõi thi·ªáu v·ªÅ Advanced Patterns",
    description: "Trong b√†i h·ªçc n√†y, ch√∫ng ta s·∫Ω t√¨m hi·ªÉu v·ªÅ c√°c pattern n√¢ng cao trong React nh∆∞ Higher-Order Components, Render Props, v√† Compound Components.",
    duration: 45,
    completed: false,
    moduleId: "mod1",
    content: `
# Gi·ªõi thi·ªáu v·ªÅ Advanced Patterns trong React

## T·ªïng quan
Advanced Patterns trong React l√† nh·ªØng k·ªπ thu·∫≠t v√† m·∫´u thi·∫øt k·∫ø gi√∫p ch√∫ng ta vi·∫øt code React hi·ªáu qu·∫£ h∆°n, d·ªÖ maintain v√† c√≥ th·ªÉ t√°i s·ª≠ d·ª•ng.

## C√°c Pattern ch√≠nh

### 1. Higher-Order Components (HOC)
Higher-Order Component l√† m·ªôt function nh·∫≠n v√†o m·ªôt component v√† tr·∫£ v·ªÅ m·ªôt component m·ªõi v·ªõi c√°c t√≠nh nƒÉng b·ªï sung.

\`\`\`jsx
function withLoading(WrappedComponent) {
  return function WithLoadingComponent(props) {
    if (props.isLoading) {
      return <div>Loading...</div>;
    }
    return <WrappedComponent {...props} />;
  };
}
\`\`\`

### 2. Render Props
Render Props l√† m·ªôt k·ªπ thu·∫≠t chia s·∫ª code gi·ªØa c√°c React components b·∫±ng c√°ch s·ª≠ d·ª•ng m·ªôt prop c√≥ gi√° tr·ªã l√† function.

\`\`\`jsx
function Mouse({ render }) {
  const [position, setPosition] = useState({ x: 0, y: 0 });
  
  // Logic x·ª≠ l√Ω mouse movement
  
  return render(position);
}
\`\`\`

### 3. Compound Components
Compound Components cho ph√©p t·∫°o ra c√°c components c√≥ th·ªÉ k·∫øt h·ª£p v·ªõi nhau m·ªôt c√°ch linh ho·∫°t.

## B√†i t·∫≠p th·ª±c h√†nh
1. T·∫°o m·ªôt HOC ƒë·ªÉ th√™m authentication cho components
2. X√¢y d·ª±ng m·ªôt component s·ª≠ d·ª•ng render props pattern
3. Thi·∫øt k·∫ø m·ªôt compound component cho dropdown menu
    `,
    materials: [
        { id: "m1", fileName: "slides-intro.pdf", fileUrl: "/files/slides-intro.pdf", fileType: "pdf", size: 1200 },
        { id: "m2", fileName: "code-samples.zip", fileUrl: "/files/code-samples.zip", fileType: "zip", size: 20480 }
    ],
    exercises: [
        {
            id: "ex1",
            title: "X√¢y d·ª±ng HOC ƒë·∫ßu ti√™n",
            description: "T·∫°o m·ªôt Higher-Order Component ƒë·ªÉ th√™m loading state cho c√°c component",
            difficulty: "medium"
        }
    ],
    notes: []
};

const mockUserNotes = [
    {
        id: "note1",
        timestamp: 120,
        content: "HOC l√† m·ªôt pattern r·∫•t h·ªØu √≠ch ƒë·ªÉ t√°i s·ª≠ d·ª•ng logic",
        createdAt: new Date()
    },
    {
        id: "note2",
        timestamp: 300,
        content: "C·∫ßn nh·ªõ v·ªÅ vi·ªác forward refs khi s·ª≠ d·ª•ng HOC",
        createdAt: new Date()
    }
];

// Separate components for each section that can load independently
const ContentSection = ({ lesson, isLoading }: { lesson: any, isLoading: boolean }) => {
    const [fontSize, setFontSize] = useState(16);
    const [isBookmarked, setIsBookmarked] = useState(false);

    if (isLoading) {
        return (
            <div className="bg-gray-50 rounded-lg p-8">
                <div className="animate-pulse space-y-4">
                    <div className="h-6 bg-gray-200 rounded w-3/4"></div>
                    <div className="h-4 bg-gray-200 rounded w-full"></div>
                    <div className="h-4 bg-gray-200 rounded w-5/6"></div>
                    <div className="h-4 bg-gray-200 rounded w-full"></div>
                    <div className="h-4 bg-gray-200 rounded w-4/5"></div>
                </div>
            </div>
        );
    }

    return (
        <div className="space-y-6">
            {/* Content Header */}
            <div className="flex items-center justify-between">
                <div>
                    <h1 className="text-2xl font-bold mb-2">{lesson.title}</h1>
                    <p className="text-gray-600">{lesson.description}</p>
                </div>
                <div className="flex items-center gap-2">
                    <Button
                        variant="outline"
                        size="sm"
                        onClick={() => setIsBookmarked(!isBookmarked)}
                    >
                        <Heart className={`w-4 h-4 mr-2 ${isBookmarked ? 'fill-current text-red-500' : ''}`} />
                        {isBookmarked ? 'ƒê√£ l∆∞u' : 'L∆∞u'}
                    </Button>
                    <div className="flex items-center gap-1">
                        <Button
                            variant="outline"
                            size="sm"
                            onClick={() => setFontSize(Math.max(12, fontSize - 2))}
                        >
                            A-
                        </Button>
                        <span className="text-sm px-2">{fontSize}px</span>
                        <Button
                            variant="outline"
                            size="sm"
                            onClick={() => setFontSize(Math.min(24, fontSize + 2))}
                        >
                            A+
                        </Button>
                    </div>
                </div>
            </div>

            {/* Reading Progress */}
            <div className="bg-blue-50 rounded-lg p-4">
                <div className="flex items-center justify-between mb-2">
                    <span className="text-sm font-medium text-blue-700">Ti·∫øn ƒë·ªô ƒë·ªçc</span>
                    <span className="text-sm text-blue-600">Th·ªùi gian ƒë·ªçc ∆∞·ªõc t√≠nh: {lesson.duration} ph√∫t</span>
                </div>
                <Progress value={30} className="h-2" />
            </div>

            {/* Main Content */}
            <Card>
                <CardContent className="p-8">
                    <div
                        className="prose prose-lg max-w-none"
                        style={{ fontSize: `${fontSize}px` }}
                        dangerouslySetInnerHTML={{
                            __html: lesson.content
                                .replace(/^# /gm, '<h1 class="text-3xl font-bold mb-4 text-gray-900">')
                                .replace(/^## /gm, '<h2 class="text-2xl font-semibold mb-3 text-gray-800 mt-8">')
                                .replace(/^### /gm, '<h3 class="text-xl font-medium mb-2 text-gray-700 mt-6">')
                                .replace(/\*\*(.*?)\*\*/g, '<strong class="font-semibold text-gray-900">$1</strong>')
                                .replace(/`([^`]+)`/g, '<code class="bg-gray-100 px-2 py-1 rounded text-sm font-mono">$1</code>')
                                .replace(/```(\w+)?\n([\s\S]*?)```/g, '<pre class="bg-gray-900 text-gray-100 p-4 rounded-lg overflow-x-auto my-4"><code>$2</code></pre>')
                                .replace(/\n\n/g, '</p><p class="mb-4">')
                                .replace(/^\d+\./gm, '</p><li class="mb-2">')
                                .replace(/^- /gm, '</p><li class="mb-1 ml-4">')
                        }}
                    />
                </CardContent>
            </Card>

            {/* Interactive Elements */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <Card>
                    <CardHeader>
                        <CardTitle className="text-lg">üí° ƒêi·ªÉm quan tr·ªçng</CardTitle>
                    </CardHeader>
                    <CardContent>
                        <p className="text-sm text-gray-700">
                            Higher-Order Components l√† m·ªôt pattern m·∫°nh m·∫Ω ƒë·ªÉ t√°i s·ª≠ d·ª•ng logic component.
                            H√£y nh·ªõ lu√¥n forward refs khi c·∫ßn thi·∫øt.
                        </p>
                    </CardContent>
                </Card>

                <Card>
                    <CardHeader>
                        <CardTitle className="text-lg">üéØ B√†i t·∫≠p</CardTitle>
                    </CardHeader>
                    <CardContent>
                        <p className="text-sm text-gray-700 mb-3">
                            H√£y th·ª≠ t·∫°o m·ªôt HOC ƒë·ªÉ th√™m loading state cho b·∫•t k·ª≥ component n√†o.
                        </p>
                        <Button size="sm" variant="outline">
                            Xem ƒë√°p √°n
                        </Button>
                    </CardContent>
                </Card>
            </div>
        </div>
    );
}; const NotesSection = ({ notes, isLoading }: { notes: any[], isLoading: boolean }) => {
    const [newNote, setNewNote] = useState("");
    const [currentTimestamp, setCurrentTimestamp] = useState(120);

    if (isLoading) {
        return (
            <div className="p-4">
                <div className="animate-pulse space-y-4">
                    <div className="h-4 bg-gray-200 rounded w-3/4"></div>
                    <div className="h-4 bg-gray-200 rounded w-1/2"></div>
                </div>
            </div>
        );
    }

    return (
        <div className="space-y-4">
            <div className="flex justify-between items-center">
                <h3 className="font-medium">Ghi ch√∫ c·ªßa t√¥i</h3>
                <Button size="sm">
                    <PenTool className="w-4 h-4 mr-2" />
                    Th√™m ghi ch√∫
                </Button>
            </div>

            {/* Add Note Form */}
            <div className="border rounded-lg p-4">
                <div className="flex items-center gap-2 mb-3 text-sm text-gray-600">
                    <Clock className="w-4 h-4" />
                    <span>Th·ªùi ƒëi·ªÉm: {Math.floor(currentTimestamp / 60)}:{(currentTimestamp % 60).toString().padStart(2, '0')}</span>
                </div>
                <textarea
                    value={newNote}
                    onChange={(e) => setNewNote(e.target.value)}
                    placeholder="Nh·∫≠p ghi ch√∫ t·∫°i th·ªùi ƒëi·ªÉm n√†y..."
                    className="w-full p-3 border rounded-lg resize-none"
                    rows={3}
                />
                <div className="flex justify-end gap-2 mt-2">
                    <Button variant="outline" size="sm">H·ªßy</Button>
                    <Button size="sm">L∆∞u ghi ch√∫</Button>
                </div>
            </div>

            {/* Existing Notes */}
            <div className="space-y-3">
                {notes.map(note => (
                    <div key={note.id} className="border rounded-lg p-4">
                        <div className="flex justify-between items-start mb-2">
                            <div className="flex items-center gap-2 text-sm text-gray-600">
                                <StickyNote className="w-4 h-4" />
                                <span>{Math.floor(note.timestamp / 60)}:{(note.timestamp % 60).toString().padStart(2, '0')}</span>
                            </div>
                            <Button variant="ghost" size="sm">X√≥a</Button>
                        </div>
                        <p className="text-gray-700">{note.content}</p>
                    </div>
                ))}
            </div>
        </div>
    );
};

const MaterialsSection = ({ materials, isLoading }: { materials: any[], isLoading: boolean }) => {
    if (isLoading) {
        return (
            <div className="p-4">
                <div className="animate-pulse space-y-4">
                    {[1, 2, 3].map(i => (
                        <div key={i} className="flex items-center gap-3">
                            <div className="w-8 h-8 bg-gray-200 rounded"></div>
                            <div className="flex-1">
                                <div className="h-4 bg-gray-200 rounded w-3/4 mb-1"></div>
                                <div className="h-3 bg-gray-200 rounded w-1/2"></div>
                            </div>
                        </div>
                    ))}
                </div>
            </div>
        );
    }

    return (
        <div className="space-y-4">
            <h3 className="font-medium">T√†i li·ªáu b√†i h·ªçc</h3>
            <div className="space-y-3">
                {materials.map(material => (
                    <div key={material.id} className="flex items-center justify-between p-3 border rounded-lg">
                        <div className="flex items-center gap-3">
                            <FileText className="w-6 h-6 text-blue-500" />
                            <div>
                                <p className="font-medium">{material.fileName}</p>
                                <p className="text-sm text-gray-600">
                                    {material.fileType.toUpperCase()} ‚Ä¢ {Math.round(material.size / 1024)} KB
                                </p>
                            </div>
                        </div>
                        <Button variant="outline" size="sm">
                            <Download className="w-4 h-4 mr-2" />
                            T·∫£i xu·ªëng
                        </Button>
                    </div>
                ))}
            </div>
        </div>
    );
};

const ReadingNotesSection = ({ lesson, isLoading }: { lesson: any, isLoading: boolean }) => {
    if (isLoading) {
        return (
            <div className="p-4">
                <div className="animate-pulse space-y-2">
                    {[1, 2, 3, 4, 5].map(i => (
                        <div key={i} className="h-4 bg-gray-200 rounded w-full"></div>
                    ))}
                </div>
            </div>
        );
    }

    return (
        <div className="space-y-4">
            <h3 className="font-medium">T√≥m t·∫Øt b√†i h·ªçc</h3>
            <div className="border rounded-lg p-4 bg-blue-50">
                <h4 className="font-medium text-blue-800 mb-2">Nh·ªØng ƒëi·ªÉm ch√≠nh</h4>
                <ul className="text-sm text-blue-700 space-y-1">
                    <li>‚Ä¢ Higher-Order Components (HOC) l√† pattern t√°i s·ª≠ d·ª•ng logic</li>
                    <li>‚Ä¢ Render Props gi√∫p chia s·∫ª state logic gi·ªØa components</li>
                    <li>‚Ä¢ Compound Components t·∫°o API linh ho·∫°t</li>
                    <li>‚Ä¢ M·ªói pattern c√≥ ∆∞u nh∆∞·ª£c ƒëi·ªÉm ri√™ng</li>
                </ul>
            </div>

            <div className="border rounded-lg p-4 bg-green-50">
                <h4 className="font-medium text-green-800 mb-2">B∆∞·ªõc ti·∫øp theo</h4>
                <p className="text-sm text-green-700">
                    Trong b√†i h·ªçc ti·∫øp theo, ch√∫ng ta s·∫Ω th·ª±c h√†nh x√¢y d·ª±ng m·ªôt ·ª©ng d·ª•ng s·ª≠ d·ª•ng c√°c patterns n√†y.
                </p>
            </div>
        </div>
    );
};

export default function LessonDetailPage() {
    const params = useParams();
    const courseId = params.id as string;
    const lessonId = params.lessonId as string;

    const [lesson, setLesson] = useState<any>(null);
    const [sidebarOpen, setSidebarOpen] = useState(true);
    const [loadingStates, setLoadingStates] = useState({
        content: true,
        notes: true,
        materials: true,
        summary: true
    });

    useEffect(() => {
        // Mock API calls with different loading times for each section
        setLesson(mockCurrentLesson);

        // Simulate loading for each section
        setTimeout(() => {
            setLoadingStates(prev => ({ ...prev, content: false }));
        }, 1000);

        setTimeout(() => {
            setLoadingStates(prev => ({ ...prev, materials: false }));
        }, 1500);

        setTimeout(() => {
            setLoadingStates(prev => ({ ...prev, notes: false }));
        }, 2000);

        setTimeout(() => {
            setLoadingStates(prev => ({ ...prev, summary: false }));
        }, 2500);
    }, [courseId, lessonId]);

    if (!lesson) {
        return (
            <div className="text-center py-12">
                <BookOpen className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                <h2 className="text-xl font-semibold text-gray-900 mb-2">ƒêang t·∫£i b√†i h·ªçc...</h2>
            </div>
        );
    }

    const currentLessonIndex = mockLessons.findIndex(l => l.id === lessonId);
    const previousLesson = currentLessonIndex > 0 ? mockLessons[currentLessonIndex - 1] : null;
    const nextLesson = currentLessonIndex < mockLessons.length - 1 ? mockLessons[currentLessonIndex + 1] : null;

    return (
        <div className="flex h-screen bg-gray-50">
            {/* Sidebar - Lesson List */}
            <div className={`${sidebarOpen ? 'w-80' : 'w-0'} transition-all duration-300 overflow-hidden bg-white border-r`}>
                <div className="p-4 border-b">
                    <div className="flex items-center justify-between">
                        <h3 className="font-semibold">Danh s√°ch b√†i h·ªçc</h3>
                        <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => setSidebarOpen(false)}
                        >
                            <ChevronDown className="w-4 h-4" />
                        </Button>
                    </div>
                </div>
                <div className="p-4 space-y-2 max-h-96 overflow-y-auto">
                    {mockLessons.map((l, index) => (
                        <Link
                            key={l.id}
                            href={`/courses/detail/${courseId}/lessons/${l.id}`}
                            className={`block p-3 rounded-lg border hover:bg-gray-50 ${l.id === lessonId ? 'bg-blue-50 border-blue-200' : ''
                                }`}
                        >
                            <div className="flex items-center gap-3">
                                <div className="w-6 h-6 rounded-full bg-gray-100 flex items-center justify-center text-xs font-medium">
                                    {index + 1}
                                </div>
                                <div className="flex-1">
                                    <p className="font-medium text-sm">{l.title}</p>
                                    <p className="text-xs text-gray-600">{l.duration} ph√∫t</p>
                                </div>
                                {l.completed && <CheckCircle className="w-4 h-4 text-green-500" />}
                            </div>
                        </Link>
                    ))}
                </div>
            </div>

            {/* Main Content */}
            <div className="flex-1 flex flex-col">
                {/* Header */}
                <div className="bg-white border-b p-4">
                    <div className="flex items-center justify-between">
                        <div className="flex items-center gap-4">
                            {!sidebarOpen && (
                                <Button
                                    variant="ghost"
                                    size="sm"
                                    onClick={() => setSidebarOpen(true)}
                                >
                                    <Menu className="w-4 h-4" />
                                </Button>
                            )}
                            <div className="flex items-center gap-2 text-sm text-gray-600">
                                <Link href={routes.user.courses} className="hover:text-gray-900">
                                    Kh√≥a h·ªçc
                                </Link>
                                <span>/</span>
                                <Link href={`/courses/detail/${courseId}`} className="hover:text-gray-900">
                                    React Advanced
                                </Link>
                                <span>/</span>
                                <Link href={`/courses/detail/${courseId}/learn`} className="hover:text-gray-900">
                                    Chi ti·∫øt
                                </Link>
                                <span>/</span>
                                <span className="text-gray-900">{lesson.title}</span>
                            </div>
                        </div>
                        <Button variant="outline" asChild>
                            <Link href={`/courses/detail/${courseId}/learn`}>
                                <ArrowLeft className="w-4 h-4 mr-2" />
                                Quay l·∫°i kh√≥a h·ªçc
                            </Link>
                        </Button>
                    </div>
                </div>

                {/* Content Area */}
                <div className="flex-1 grid grid-cols-3 gap-6 p-6 overflow-hidden">
                    {/* Left Column - Content */}
                    <div className="col-span-2 space-y-6">
                        <ContentSection lesson={lesson} isLoading={loadingStates.content} />

                        {/* Navigation */}
                        <div className="flex justify-between">
                            {previousLesson ? (
                                <Button variant="outline" asChild>
                                    <Link href={`/courses/detail/${courseId}/lessons/${previousLesson.id}`}>
                                        <ArrowLeft className="w-4 h-4 mr-2" />
                                        B√†i tr∆∞·ªõc
                                    </Link>
                                </Button>
                            ) : (
                                <div></div>
                            )}

                            <Button>
                                Ho√†n th√†nh b√†i h·ªçc
                                <CheckCircle className="w-4 h-4 ml-2" />
                            </Button>

                            {nextLesson ? (
                                <Button asChild>
                                    <Link href={`/courses/detail/${courseId}/lessons/${nextLesson.id}`}>
                                        B√†i ti·∫øp theo
                                        <ArrowRight className="w-4 h-4 ml-2" />
                                    </Link>
                                </Button>
                            ) : (
                                <div></div>
                            )}
                        </div>
                    </div>

                    {/* Right Column - Tabs */}
                    <div className="space-y-6">
                        <Tabs defaultValue="notes" className="w-full">
                            <TabsList className="grid w-full grid-cols-3">
                                <TabsTrigger value="notes">Ghi ch√∫</TabsTrigger>
                                <TabsTrigger value="materials">T√†i li·ªáu</TabsTrigger>
                                <TabsTrigger value="summary">T√≥m t·∫Øt</TabsTrigger>
                            </TabsList>

                            <TabsContent value="notes" className="mt-4">
                                <Card>
                                    <CardContent className="p-4">
                                        <NotesSection notes={mockUserNotes} isLoading={loadingStates.notes} />
                                    </CardContent>
                                </Card>
                            </TabsContent>

                            <TabsContent value="materials" className="mt-4">
                                <Card>
                                    <CardContent className="p-4">
                                        <MaterialsSection materials={lesson.materials} isLoading={loadingStates.materials} />
                                    </CardContent>
                                </Card>
                            </TabsContent>

                            <TabsContent value="summary" className="mt-4">
                                <Card>
                                    <CardContent className="p-4">
                                        <ReadingNotesSection lesson={lesson} isLoading={loadingStates.summary} />
                                    </CardContent>
                                </Card>
                            </TabsContent>
                        </Tabs>
                    </div>
                </div>
            </div>
        </div>
    );
}